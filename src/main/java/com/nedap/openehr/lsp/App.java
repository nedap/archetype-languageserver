/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.nedap.openehr.lsp;

import com.google.gson.InstanceCreator;
import org.eclipse.lsp4j.SemanticTokensCapabilities;
import org.eclipse.lsp4j.jsonrpc.Launcher;
import org.eclipse.lsp4j.launch.LSPLauncher;
import org.eclipse.lsp4j.services.LanguageClient;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.function.Consumer;

public class App {

    public static void main(String[] args) {
        if(args.length > 0) {
            new App().startNetworkedLanguageServer();
        } else {
            new App().startCommandLineServer();
        }

    }

    private void startCommandLineServer() {

        InputStream in = System.in;
        OutputStream out = System.out;

        ADL2LanguageServer server = new ADL2LanguageServer();
        Launcher<LanguageClient> launcher =  new LSPLauncher.Builder<LanguageClient>()
                .setLocalService(server)
                .setRemoteInterface(LanguageClient.class)
                .setInput(in)
                .setOutput(out)
                .configureGson(gsonBuilder -> {
                    gsonBuilder.registerTypeAdapter(
                            SemanticTokensCapabilities.class,
                            new InstanceCreator<SemanticTokensCapabilities>() {

                                @Override
                                public SemanticTokensCapabilities createInstance(Type type) {
                                    return new SemanticTokensCapabilities(null);
                                }
                            }
                    );
                })
                .create();
        //Launcher<LanguageClient> launcher = LSPLauncher.createServerLauncher(server, in, out);
        server.connect(launcher.getRemoteProxy(), launcher.getRemoteEndpoint());

        launcher.startListening();
    }

    private void startNetworkedLanguageServer() {
        int port = 1278;
        try {
            final ServerSocket serversocket = new ServerSocket(port);
            new Thread( () -> {
                    while(true) {
                        try {
                            Socket socket = serversocket.accept();
                            if(socket != null) {
                                InputStream in = socket.getInputStream();
                                OutputStream out = socket.getOutputStream();

                                ADL2LanguageServer server = new ADL2LanguageServer();
                                Launcher<LanguageClient> launcher =  new LSPLauncher.Builder<LanguageClient>()
                                        .setLocalService(server)
                                        .setRemoteInterface(LanguageClient.class)
                                        .setInput(in)
                                        .setOutput(out)
                                        .configureGson(gsonBuilder -> {
                                            gsonBuilder.registerTypeAdapter(
                                                    SemanticTokensCapabilities.class,
                                                    new InstanceCreator<SemanticTokensCapabilities>() {

                                                        @Override
                                                        public SemanticTokensCapabilities createInstance(Type type) {
                                                            return new SemanticTokensCapabilities(null);
                                                        }
                                                    }
                                            );
                                        })
                                        .create();
                                //Launcher<LanguageClient> launcher = LSPLauncher.createServerLauncher(server, in, out);
                                server.connect(launcher.getRemoteProxy(), launcher.getRemoteEndpoint());


                                launcher.startListening();
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
            }).start();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
