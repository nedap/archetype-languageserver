/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */


plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id "com.github.johnrengelman.shadow" version "5.2.0"
    //id "com.palantir.graal" version "0.7.1"
    id "org.beryx.runtime" version "1.9.1"

}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.2-jre'

    implementation 'com.nedap.healthcare.archie:archie-all:0.12.1'
    implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.9.0'
    implementation 'org.slf4j:slf4j-nop:1.7.9'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

application {
    // Define the main class for the application.
    mainClassName = 'com.nedap.openehr.lsp.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}
//
//graal {
//    outputName 'archetype-lsp'
//    mainClass 'com.nedap.openehr.lsp.App'
//    javaVersion '11'
//    option '--no-fallback'
//    option '-H:IncludeResources=.*\\.(bmm|arp)'
//    graalVersion '20.1.0'
//}
//jar {
//    manifest {
//        attributes(
//                'Main-Class': 'com.nedap.openehr.lsp.App'
//        )
//    }
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}
task buildExtension() {
    dependsOn build

    doLast {
        delete "$projectDir/vscode-extension/lsp-images"
        copy {
            from "$projectDir/build/image"
            into "$projectDir/vscode-extension/lsp-images"
        }
        exec {
            workingDir "$projectDir/vscode-extension"
            commandLine "npm", "install"
        }
        exec {
            workingDir "$projectDir/vscode-extension"
            commandLine "npm", "run", "compile"
        }
        exec {
            workingDir "$projectDir/vscode-extension"
            commandLine "npm", "run-script", "package"
        }

    }
}
runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.xml', 'java.sql'] //SQL required because of GSON dependency. Maybe get rid of that anyway...
    targetPlatform('linux-x64', jvm_linux_home)
    targetPlatform('winx64', jvm_windows_home)
    targetPlatform('macos', jvm_macos_home)
}